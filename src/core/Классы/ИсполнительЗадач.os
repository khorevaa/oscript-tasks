#Использовать "./internal/commands"
#Использовать logos

Перем РаБочийКаталог Экспорт;
Перем РабочаяОбласть Экспорт;
Перем ОбщиеОпции Экспорт;
Перем ИндексЗадач;

Перем Лог;

Процедура ПриСозданииОбъекта()
	
	Лог = Логирование.ПолучитьЛог("oscript.app.tasks").Поля("prefix", "runner");
	
КонецПроцедуры

Процедура Исполнить(ИмяЗадачи, 
	Знач ПользовательскиеАргументы = Неопределено,
	Знач ПользовательскиеОпции = Неопределено,
	Знач ПользовательскиеПеременныеОкружения = Неопределено,
	Знач ПользовательПерехватыватьПотоки = Неопределено) Экспорт


	Лог.Отладка("Исполняю задачу <%1>", ИмяЗадачи);

// 	ОпцииЗадачи = ИсполнительЗадач.ЗаполнитьОпции(ПользовательскиеОпции);
// ОпцииЗадачи = ИсполнительЗадач.ЗаполнитьОпции(Опции);

// АргументыЗадачи = ИсполнительЗадач.ЗаполнитьАргументы(ПользовательскиеАргументы);

	Задача = ИндексЗадач[ИмяЗадачи];

	Если Задача = Неопределено Тогда
		ВызватьИсключение "Задача не найдена в индексе задач";
	КонецЕсли;

	Если Задача.ЭтоГруппа() Тогда
		
		Для каждого ИмяЗадачиВложенной Из Задача.ВложенныеЗадачи() Цикл

			ВложеннаяЗадача = ИндексЗадач[ИмяЗадачиВложенной];

			ИсполнитьЗадачу(ВложеннаяЗадача, ПользовательскиеАргументы, ПользовательскиеОпции, ПользовательскиеПеременныеОкружения, ПользовательПерехватыватьПотоки);

		КонецЦикла;

	Иначе

		ИсполнитьЗадачу(Задача, ПользовательскиеАргументы, ПользовательскиеОпции, ПользовательскиеПеременныеОкружения, ПользовательПерехватыватьПотоки);

	КонецЕсли;

КонецПроцедуры

Процедура ИсполнитьЗадачу(Задача, 
							Знач ПользовательскиеАргументы = Неопределено,
							Знач ПользовательскиеОпции = Неопределено,
							Знач ПользовательскиеПеременныеОкружения = Неопределено,
							Знач ПользовательПерехватыватьПотоки = Неопределено)
	
	Аргументы = Задача.Аргументы;
	Если ЗначениеЗаполнено(ПользовательскиеАргументы)
		И ПользовательскиеАргументы.Количество() Тогда
		Аргументы = ПользовательскиеАргументы;
	КонецЕсли;

	ПерехватыватьПотоки = Задача.ПерехватыватьПотоки;

	Опции = Задача.Опции;
	Если ЗначениеЗаполнено(ПользовательскиеОпции)
		И ПользовательскиеОпции.Количество() Тогда
		Опции = ПользовательскиеОпции;
	КонецЕсли;

	ПеременныеОкружения = Задача.ПеременныеОкружения;
	Если ЗначениеЗаполнено(ПользовательскиеПеременныеОкружения)
		И ПользовательскиеПеременныеОкружения.Количество() Тогда
		ПеременныеОкружения = ПользовательскиеПеременныеОкружения;
	КонецЕсли;

	Если ЗначениеЗаполнено(ПользовательПерехватыватьПотоки) Тогда
		ПерехватыватьПотоки = ПользовательПерехватыватьПотоки;
	КонецЕсли;
	Лог.Поля("ПерехватыватьПотоки", ПерехватыватьПотоки).Отладка("Перехват потоков задачи");

	КомандаЗадачи = ПолучитьКомандуЗадачи(Задача.Команда, Задача.АргументыКоманды, Опции, Аргументы, ПеременныеОкружения, ПерехватыватьПотоки);
	КодВозврата = КомандаЗадачи.Исполнить();

	Если КодВозврата <> 0 Тогда
		Лог.Поля("КодВозврата", КодВозврата).КритичнаяОшибка("Не правильный код возврата");

		ВызватьИсключение КомандаЗадачи.ПолучитьВывод();
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьКомандуЗадачи(Знач Команда, АргументыКоманды, Опции, Аргументы, ПеременныеОкружения, ПерехватыватьПотоки)
	
	КомандаЗадачи = Новый КомандаЗадачи();
	КомандаЗадачи.УстановитьРабочийКаталог(РабочийКаталог);
	КомандаЗадачи.УстановитьКоманду(Команда);
	КомандаЗадачи.ДобавитьПараметры(АргументыКоманды);

	Для каждого Опция Из Опции Цикл
		Ключ = Опция.Ключ;
		Значение = Опция.Значение;

		Если ЗначениеЗаполнено(Значение) Тогда
			КомандаЗадачи.ДобавитьПараметр(СтрШаблон("%1=%2", Ключ, Значение));
		Иначе
			КомандаЗадачи.ДобавитьПараметр(Ключ);
		КонецЕсли;

	КонецЦикла;
	
	КомандаЗадачи.ДобавитьПараметры(Аргументы);
	КомандаЗадачи.ПерехватыватьПотоки(ПерехватыватьПотоки);
	// КомандаЗадачи.УстановитьПеременныеОкружения(ПеременныеОкружения);

	Если ПерехватыватьПотоки Тогда
		КомандаЗадачи.ПоказыватьВыводНемедленно(Истина);	
		ЛогЗадачи = Логирование.ПолучитьЛог("task.runner");
		// ЛогЗадачи.УстановитьРаскладку(Новый JSONФорматЛога());
		КомандаЗадачи.ДобавитьЛогВыводаКоманды(ЛогЗадачи);
	КонецЕсли;

	Возврат КомандаЗадачи;

КонецФункции

Процедура УстановитьИндексЗадач(Знач НовыйИндексЗадач) Экспорт
	ИндексЗадач = НовыйИндексЗадач;
КонецПроцедуры

Процедура УстановитьРабочийКаталог(Знач ПутьККаталогу) Экспорт
	РабочийКаталог = ПутьККаталогу;
КонецПроцедуры

Процедура УстановитьРабочуюОбласть(Знач ПутьККаталогу) Экспорт
	РабочаяОбласть = ПутьККаталогу;
КонецПроцедуры

// Процедура ЗаполнитьАргументы(Знач АргументыЗадачи, Знач ОпцииЗадачи)

// 	Если АргументыЗадачи.Количество() = 0 Тогда
// 		Возврат;
// 	КонецЕсли;

// 	// TODO: Заполнение переменных
	
// 	Для каждого Аргумент Из АргументыЗадачи Цикл
		

// 	КонецЦикла;

// КонецПроцедуры

// Функция ЗаполнитьОпции(Знач ОпцииЗадачи)

// 	ЗаполненныеОпции = Новый Соответствие();

// 	Для каждого ОпцияЗадачи Из Опции Цикл
// 		ЗаполненныеОпции.Вставить(ОпцияЗадачи.Ключ, );
// 	КонецЦикла;
	
// КонецФункции

// Процедура ЗаполнитьЗначениеОпций(ЗначениеОпции, ЗаполненныеОпции)
	
	

// 	СтрНайти(ЗначениеОпции, "$")


// КонецПроцедуры

