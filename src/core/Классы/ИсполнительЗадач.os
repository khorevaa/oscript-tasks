#Использовать "./internal/commands"
#Использовать logos

Перем РаБочийКаталог Экспорт;
Перем РабочаяОбласть Экспорт;
Перем ОбщиеОпции Экспорт;
Перем ИндексЗадач;

Перем Лог;

Процедура ПриСозданииОбъекта()
	
	Лог = Логирование.ПолучитьЛог("oscript.app.tasks").Поля("prefix", "runner");
	
КонецПроцедуры

Процедура Исполнить(ИмяЗадачи, 
	Знач ПользовательскиеАргументы = Неопределено,
	Знач ПользовательскиеОпции = Неопределено,
	Знач ПользовательскиеПеременныеОкружения = Неопределено,
	Знач ПользовательПерехватыватьПотоки = Неопределено) Экспорт

	Лог.Отладка("Исполняю задачу <%1>", ИмяЗадачи);

	Задача = ИндексЗадач[ИмяЗадачи];

	Если Задача = Неопределено Тогда
		ВызватьИсключение "Задача не найдена в индексе задач";
	КонецЕсли;

	Если Задача.ЭтоГруппа() Тогда
		
		Для каждого ИмяЗадачиВложенной Из Задача.ВложенныеЗадачи() Цикл

			ВложеннаяЗадача = ИндексЗадач[ИмяЗадачиВложенной];

			ИсполнитьЗадачу(ВложеннаяЗадача, ПользовательскиеАргументы, ПользовательскиеОпции, ПользовательскиеПеременныеОкружения, ПользовательПерехватыватьПотоки);

		КонецЦикла;

	Иначе

		ИсполнитьЗадачу(Задача, ПользовательскиеАргументы, ПользовательскиеОпции, ПользовательскиеПеременныеОкружения, ПользовательПерехватыватьПотоки);

	КонецЕсли;

КонецПроцедуры

Процедура ИсполнитьЗадачу(Задача, 
							Знач ПользовательскиеАргументы = Неопределено,
							Знач ПользовательскиеОпции = Неопределено,
							Знач ПользовательскиеПеременныеОкружения = Неопределено,
							Знач ПользовательПерехватыватьПотоки = Неопределено)
	
	Аргументы = Задача.Аргументы;
	Если ЗначениеЗаполнено(ПользовательскиеАргументы)
		И ПользовательскиеАргументы.Количество() Тогда
		Аргументы = ПользовательскиеАргументы;
	КонецЕсли;

	ПерехватыватьПотоки = Задача.ПерехватыватьПотоки;

	Опции = Задача.Опции;
	Если ЗначениеЗаполнено(ПользовательскиеОпции)
		И ПользовательскиеОпции.Количество() Тогда
		
		Для каждого Переменная Из ПользовательскиеОпции Цикл
			Лог.Отладка("Добавляю опцию <%1> - <%2>", Переменная.Ключ, Переменная.Значение);
			Опции.Вставить(Переменная.Ключ, Переменная.Значение);
		КонецЦикла;
		
	КонецЕсли;

	ПеременныеОкружения = Задача.ПеременныеОкружения;
	Если ЗначениеЗаполнено(ПользовательскиеПеременныеОкружения)
		И ПользовательскиеПеременныеОкружения.Количество() Тогда

		Для каждого Переменная Из ПользовательскиеПеременныеОкружения Цикл
			Лог.Отладка("Добавляю переменную окружения <%1> - <%2>", Переменная.Ключ, Переменная.Значение);
			ПеременныеОкружения.Вставить(Переменная.Ключ, Переменная.Значение);
		КонецЦикла;

	КонецЕсли;

	ВычислитьПеременныеОкружения(ПеременныеОкружения);

	ПодставитьЗначениеВСоответствие(Опции, ПеременныеОкружения);
	ПодставитьЗначениеВМассив(Аргументы, Опции);
	ПодставитьЗначениеВМассив(Аргументы, ПеременныеОкружения);

	Если ЗначениеЗаполнено(ПользовательПерехватыватьПотоки) Тогда
		ПерехватыватьПотоки = ПользовательПерехватыватьПотоки;
	КонецЕсли;
	Лог.Поля("ПерехватыватьПотоки", ПерехватыватьПотоки).Отладка("Перехват потоков задачи");

	КомандаЗадачи = ПолучитьКомандуЗадачи(Задача.Команда, Задача.АргументыКоманды, Аргументы, ПеременныеОкружения, ПерехватыватьПотоки);

	КодВозврата = КомандаЗадачи.Исполнить();

	Если КодВозврата <> 0 Тогда
		Лог.Поля("КодВозврата", КодВозврата).КритичнаяОшибка("Не правильный код возврата");
		ВызватьИсключение КомандаЗадачи.ПолучитьВывод();
	КонецЕсли;

КонецПроцедуры

Процедура ПодставитьЗначениеВСоответствие(Приемник, НаборПодстановок)
	
	НовыеОпции = Новый Соответствие();

	Для каждого КлючЗначение Из Приемник Цикл
		
		Значение = КлючЗначение.Значение;
		// Подстановка из установленных ПО
	
		НовоеЗначение = ПодставитьЗначениеВСтроку(Значение, НаборПодстановок);

		НовыеОпции.Вставить(КлючЗначение.Ключ, НовоеЗначение);

	КонецЦикла;

	Опции = НовыеОпции;

КонецПроцедуры

Процедура ПодставитьЗначениеВМассив(МассивЗначений, НаборПодстановок)
	
	НовыйМассив = Новый Массив();

	Для каждого Значение Из МассивЗначений Цикл
		
		НовоеЗначение = ПодставитьЗначениеВСтроку(Значение, НаборПодстановок);

		НовыйМассив.Добавить(НовоеЗначение);

	КонецЦикла;

	МассивЗначений = НовыйМассив;

КонецПроцедуры

Функция ПодставитьЗначениеВСтроку(Знач Значение, НаборПодстановок)
	
	ЧислоЗамен = СтрЧислоВхождений(Значение, "${");

	НовоеЗначение = Значение;

	Для ИИ = 1 По ЧислоЗамен Цикл

		НачальныйСимвол = СтрНайти(Значение, "${",,,ИИ);
		КонечныйСимвол = СтрНайти(Значение, "}",,,ИИ);

		ИмяПеременной = Сред(Значение, НачальныйСимвол + 2, КонечныйСимвол - НачальныйСимвол - 2);
		
		Если СтрНайти(НРег(ИмяПеременной), "workspace") 
			И (НаборПодстановок[ИмяПеременной] = Неопределено 
			ИЛИ ПустаяСтрока(НаборПодстановок[ИмяПеременной])) Тогда
			ЗначениеПеременной = РабочаяОбласть;
		ИначеЕсли СтрНайти(НРег(ИмяПеременной), "pwd") 
			И (НаборПодстановок[ИмяПеременной] = Неопределено 
			ИЛИ ПустаяСтрока(НаборПодстановок[ИмяПеременной])) Тогда
			ЗначениеПеременной = РаБочийКаталог;
		Иначе
			ЗначениеПеременной = НаборПодстановок[ИмяПеременной];
		КонецЕсли;
		
		Лог.Отладка("%1 - %2 - %3", ИИ, ИмяПеременной, ЗначениеПеременной);
		
		Если ЗначениеПеременной = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		НовоеЗначение = СтрЗаменить(НовоеЗначение, "${" + ИмяПеременной + "}", ЗначениеПеременной);

	КонецЦикла;

	Возврат НовоеЗначение;

КонецФункции


Процедура ВычислитьПеременныеОкружения(ПеременныеОкружения)
	
	НовыеПеременныеОкружения = Новый Соответствие();

	Для каждого КлючЗначение Из ПеременныеОкружения Цикл
		
		Переменная = КлючЗначение.Ключ;
		Значение = КлючЗначение.Значение;

		Если СтрНачинаетсяС(Значение, "$") Тогда
			Значение = ПолучитьПеременнуюСреды(Сред(Значение, 2));
		КонецЕсли;

		НовыеПеременныеОкружения.Вставить(Переменная, Значение);
	КонецЦикла;
	
	ПеременныеОкружения = НовыеПеременныеОкружения;

КонецПроцедуры

Функция ПолучитьКомандуЗадачи(Знач Команда, АргументыКоманды, Аргументы, ПеременныеОкружения, ПерехватыватьПотоки)
	
	КомандаЗадачи = Новый КомандаЗадачи();
	КомандаЗадачи.УстановитьРабочийКаталог(РабочийКаталог);
	КомандаЗадачи.УстановитьКоманду(Команда);
	КомандаЗадачи.УстановитьПеременныеОкружения(ПеременныеОкружения);
	КомандаЗадачи.ДобавитьПараметры(АргументыКоманды);
	
	КомандаЗадачи.ДобавитьПараметры(Аргументы);
	КомандаЗадачи.ПерехватыватьПотоки(ПерехватыватьПотоки);
	// КомандаЗадачи.УстановитьПеременныеОкружения(ПеременныеОкружения);

	Если ПерехватыватьПотоки Тогда
		КомандаЗадачи.ПоказыватьВыводНемедленно(Истина);	
		ЛогЗадачи = Логирование.ПолучитьЛог("task.runner");
		// ЛогЗадачи.УстановитьРаскладку(Новый JSONФорматЛога());
		КомандаЗадачи.ДобавитьЛогВыводаКоманды(ЛогЗадачи);
	КонецЕсли;

	Возврат КомандаЗадачи;

КонецФункции

Процедура УстановитьИндексЗадач(Знач НовыйИндексЗадач) Экспорт
	ИндексЗадач = НовыйИндексЗадач;
КонецПроцедуры

Процедура УстановитьРабочийКаталог(Знач ПутьККаталогу) Экспорт
	РабочийКаталог = ПутьККаталогу;
КонецПроцедуры

Процедура УстановитьРабочуюОбласть(Знач ПутьККаталогу) Экспорт
	РабочаяОбласть = ПутьККаталогу;
КонецПроцедуры

// Процедура ЗаполнитьАргументы(Знач АргументыЗадачи, Знач ОпцииЗадачи)

// 	Если АргументыЗадачи.Количество() = 0 Тогда
// 		Возврат;
// 	КонецЕсли;

// 	// TODO: Заполнение переменных
	
// 	Для каждого Аргумент Из АргументыЗадачи Цикл
		

// 	КонецЦикла;

// КонецПроцедуры

// Функция ЗаполнитьОпции(Знач ОпцииЗадачи)

// 	ЗаполненныеОпции = Новый Соответствие();

// 	Для каждого ОпцияЗадачи Из Опции Цикл
// 		ЗаполненныеОпции.Вставить(ОпцияЗадачи.Ключ, );
// 	КонецЦикла;
	
// КонецФункции

// Процедура ЗаполнитьЗначениеОпций(ЗначениеОпции, ЗаполненныеОпции)
	
	

// 	СтрНайти(ЗначениеОпции, "$")


// КонецПроцедуры

